package com.cook.api.service

import org.springframework.stereotype.Service
import org.springframework.beans.factory.annotation.Autowired
import com.dix.base.common.misc.pagination.Pagination
import com.dix.base.core.Core
import com.dix.base.exception.NotExistsException
import org.springframework.beans.BeanUtils

@Service("<%= modelName %>Service")
class <%= modelName %>Service {

    companion object {
        private val logger = org.slf4j.LoggerFactory.getLogger(<%= modelName %>Service::class.java)
    }

    @Autowired
    lateinit var <%= functionName %>Mapper: <%= modelName %>Mapper

    fun select<%= modelName %>List(po: <%= modelName %>ListPO): MutableMap<String, Any>? {
        val list: List<<%= modelName %>VO> = <%= functionName %>Mapper.select<%= modelName %>List(po, Pagination.limitSql(po.page, po.pageSize))

        val count = <%= functionName %>Mapper.count<%= modelName %>List(po, "")

        return hashMapOf(
            "list" to list,
            "count" to count
        )
    }

    fun select<%= modelName %>Detail(po: IdPO): MutableMap<String, Any>? {
        val vo = <%= functionName %>Mapper.findById(po.id) ?: throw NotExistsException("未找到对应记录")

        return hashMapOf(
            "<%= tableName %>" to vo
        )
    }

    fun delete<%= modelName %>(po: IdPO) {
        val <%= functionName %> = Core.Q().findById(<%= modelName %>::class.java, po.id) ?: throw NotExistsException("未找到对应记录")

        <%= functionName %>.delete()
    }

    fun save<%= modelName %>(param: <%= modelName %>SavePO): HashMap<String, Any> {
        val <%= functionName %> = <%= modelName %>()
        BeanUtils.copyProperties(param, <%= functionName %>)

        <%= functionName %>.save()

        return hashMapOf(
            "<%= tableName %>_id" to <%= functionName %>.id
        )
    }
}
