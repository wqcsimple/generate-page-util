package com.hb.domain.model

import com.fly.base.core.Core
import com.fly.base.exception.NotExistsException
import com.fly.base.model.Model
import com.fly.base.model.BaseModel
import com.fasterxml.jackson.annotation.JsonProperty

/**
*  <%= tableComment %>
*  created by whis
*/
@Model(tableName = "<%= tableName %>")
@JsonSerialize(using = ModelJsonSerializer::class)
class <%= modelName %> : BaseModel() {

    <% fieldList.forEach(function (item) { %>@Column("<%= item['jsonName'] %>") var <%= item['modelName'] %>: <%= item['dataType'] %> = <%- item['dataTypeValue'] %> <% if (item['comment']) { %> // <%= item["comment"] %> <% } %>
    <% }); %>

    companion object {

        fun findById(id: Long): <%= modelName %>? {
            return Core.Q().findById(<%= modelName %>::class.java, id)
        }

        fun findOrFail(id: Long): <%= modelName %> {
            return findById(id) ?: throw NotExistsException()
        }

        fun getRawById(id: Long): Map<String, Any>? {
            val data = findById(id) ?: return null
            return data.process()
        }
    }
}
